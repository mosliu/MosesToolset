/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.liuxuan.UI.JIF_UIs;

import java.util.Timer;
import java.util.TimerTask;
import net.liuxuan.UI.DataHolder.DataHolder;
import net.liuxuan.UI.JIFUI;
import net.liuxuan.device.base.RS232Connector;
import net.liuxuan.device.OX2SDU.codec.OX2SDUProtocolCodecFactory;
import net.liuxuan.device.OX2SDU.handler.OX2SDUHandler;
import net.liuxuan.device.OX2SDU.packet.OX2SDUOutMessage;
import org.apache.mina.core.future.WriteFuture;
import org.apache.mina.core.service.IoHandlerAdapter;
import org.apache.mina.core.session.IoSession;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
import org.apache.mina.filter.logging.LoggingFilter;
import org.apache.mina.transport.serial.SerialAddress;

/**
 *
 * @author Moses
 */
public class JIF_OX2SDU extends JIFUI {

    private static JIF_OX2SDU myInstance; //thisJFrame singleton

    public static JIF_OX2SDU getInstance(DataHolder _datas) {
        if (myInstance == null) {
            myInstance = new JIF_OX2SDU();
        }
        myInstance.datas = _datas;
        return myInstance;
    }

    /**
     * Creates new form JIF_OX2SDU
     */
    private JIF_OX2SDU() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("山大氧传感器解析");

        jToggleButton1.setText("jToggleButton1");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToggleButton1)
                .addContainerGap(397, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(247, Short.MAX_VALUE)
                .addComponent(jToggleButton1)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        portAddress = (SerialAddress) datas.get(Comm1str);
        handler = new OX2SDUHandler();
        if (receiver != null) {
            receiver.endListen();
        }
        receiver = new RS232Connector(handler, portAddress);

//        receiver.addFilter("logger2", new LoggingFilter());
        receiver.addFilter("codec2", new ProtocolCodecFilter(new OX2SDUProtocolCodecFactory()));    // 设置编码过滤器
        final OX2SDUOutMessage pkt2 = new OX2SDUOutMessage();
        byte[] bt2 = {(byte) 'R'};
        pkt2.setPktbs(bt2);
        if (jToggleButton1.isSelected()) {
            receiver.startListen();
            final IoSession session = receiver.getReceiverSession();

            timer.scheduleAtFixedRate(new TimerTask() {
                public void run() {
                    WriteFuture wf2;
                    wf2 = session.write(pkt2);// 发送消息
                    wf2.awaitUninterruptibly();
                }
            }, 0, 1000);
            jToggleButton1.setText("关闭");
        } else {
            receiver.endListen();
            timer.cancel();
            jToggleButton1.setText("开始");
        }

    }//GEN-LAST:event_jToggleButton1ActionPerformed

    public void init() {

    }
    private static final String Comm1str = "comm1";
    SerialAddress portAddress;
    IoHandlerAdapter handler = null;
    RS232Connector receiver = null;
    Timer timer = new Timer();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}
