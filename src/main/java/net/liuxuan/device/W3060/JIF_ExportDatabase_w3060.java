/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.liuxuan.device.W3060;

import net.liuxuan.device.w3330.*;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import net.liuxuan.UI.component.ExtensionFileFilter;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Moses
 */
public class JIF_ExportDatabase_w3060 extends net.liuxuan.UI.JIFUI {
    private static final org.slf4j.Logger log = LoggerFactory.getLogger(JIF_ExportDatabase_w3060.class);
    File inputfile = null;
    File outputfile = null;
    WritableWorkbook book = null;//建立文件

    private static JIF_ExportDatabase_w3060 myInstance; //thisJFrame singleton

    public static JIF_ExportDatabase_w3060 getInstance(net.liuxuan.UI.DataHolder.DataHolder _datas) {
        if (myInstance == null) {
            myInstance = new JIF_ExportDatabase_w3060();
        }
        myInstance.datas = _datas;
        return myInstance;
    }

    /**
     * Creates new form JIF_ExportDatabase
     */
    private JIF_ExportDatabase_w3060() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton_Openfile = new javax.swing.JButton();
        jButton_export = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel_dbpath = new javax.swing.JLabel();
        jLabel_info = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("W3/060 Data Exporter By Liuxuan v1.01 ");

        jButton_Openfile.setText("Open .MDB File");
        jButton_Openfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_OpenfileActionPerformed(evt);
            }
        });

        jButton_export.setText("Export");
        jButton_export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_exportActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 153));
        jLabel1.setText("W3/060 Data Exporter");
        jLabel1.setToolTipText("");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "TestID", "TestType", "DeviceID", "CellID", "Operator", "StartTime", "EndTime", "Comments", "SetTemp."
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jLabel_dbpath.setText("no file selected");

        jLabel_info.setText("   ");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, jButton_export, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, jButton_Openfile, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(jLabel_dbpath, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                                    .add(jLabel_info, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1023, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 255, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton_Openfile)
                    .add(jLabel_dbpath))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton_export)
                    .add(jLabel_info))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_OpenfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_OpenfileActionPerformed

        //设置filter
        ExtensionFileFilter filter = new ExtensionFileFilter("mdb", false, true);
        filter.setDescription("Open DataBase File");
        //取得文件路径

        JFileChooser jfc = new JFileChooser();

        FileSystemView fsv = FileSystemView.getFileSystemView();
        //得到桌面路径
        jfc.setCurrentDirectory(fsv.getHomeDirectory());

        jfc.setDialogTitle("Choose the mdb file");
        jfc.setMultiSelectionEnabled(false);
        jfc.setDialogType(JFileChooser.OPEN_DIALOG);
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jfc.setFileFilter(filter);
        int result = jfc.showOpenDialog(this);  // 打开"打开文件"对话框
        if (result == JFileChooser.APPROVE_OPTION) {
            String filesrc = jfc.getSelectedFile().getAbsolutePath();
            inputfile = jfc.getSelectedFile();
            jLabel_dbpath.setText("DB File Path:" + filesrc);
            maxid = Integer.MIN_VALUE;
            minid = Integer.MAX_VALUE;
        } else {
            return;
        }
        //显示路径

        Infodata = new Vector();
        Infocolumns = new Vector();

        try {

            //            String url = "jdbc:odbc:driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=D://b.MDB";
            if (inputfile == null) {
                return;
            }
            initDB();

            sql = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = sql.executeQuery("SELECT * FROM test order by testid desc");

            Infocolumns.add("TestID");
            Infocolumns.add("TestType");
            Infocolumns.add("DeviceID");
            Infocolumns.add("CellID");
            Infocolumns.add("Operator");
            Infocolumns.add("StartTime");
            Infocolumns.add("EndTime");
            Infocolumns.add("Comments");
            Infocolumns.add("SetTemp.");
            int columnCount = Infocolumns.size();
            Vector row;
            while (rs.next()) {
                row = new Vector(columnCount);
                int temp = 0;
                int ivalue = rs.getInt("TESTID");
                maxid = maxid < ivalue ? ivalue : maxid;
                minid = minid > ivalue ? ivalue : minid;
                row.add(ivalue);
                temp = rs.getInt("TESTTYPE");
                if (temp == 1) {
                    row.add("OTR");
                } else if (temp == 2) {
                    row.add("WVTR");
                } else {
                    row.add(temp);
                }
                row.add(rs.getInt("DEVICEID"));
                row.add(rs.getString("CELLID"));
                row.add(rs.getString("OPERATOR"));
                row.add(rs.getDate("STARTTIME"));
                row.add(rs.getDate("ENDTIME"));
                row.add(rs.getString("COMMENTS"));
                row.add(rs.getDouble("SETTEMP"));
                //                row.add(rs.getString(11));
                //                row.add(rs.getInt(10));
                Infodata.add(row);
            }

            DefaultTableModel tableModel = new DefaultTableModel(Infodata, Infocolumns);
            jTable1.setModel(tableModel);
            //产生水平滚动条
            // jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            jTable1.setSelectionBackground(Color.orange);
            //表头排序
            TableRowSorter<TableModel> tableRowSorter = new TableRowSorter<TableModel>(tableModel);
            jTable1.setRowSorter(tableRowSorter);
            //            jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            //table内容居中
            DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();// 设置table内容居中
            tcr.setHorizontalAlignment(SwingConstants.CENTER);// 这句和上句作用一样
            jTable1.setDefaultRenderer(Object.class, tcr);

            //表头居中
            ((DefaultTableCellRenderer) jTable1.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
            //            DefaultTableCellRenderer  rh = new DefaultTableCellRenderer();
            //            rh.setHorizontalAlignment(SwingConstants.CENTER);
            //            jTable1.getTableHeader().setDefaultRenderer(rh);

            jTable1.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(28);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(40);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(40);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(7).setPreferredWidth(100);

        } catch (SQLException ee) {
            System.out.println(ee);
        } catch (ClassNotFoundException ex) {
            log.error("未找到数据库Class", ex);
        } finally {
            try {
                sql.close();
            } catch (Exception e) {
            }
            try {
                rs.close();
            } catch (Exception e) {
            }
        }

        //        validate();
    }//GEN-LAST:event_jButton_OpenfileActionPerformed

    private void jButton_exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_exportActionPerformed
        JFileChooser jfc = new JFileChooser();
        ExtensionFileFilter filter;

        if (jTable1.getSelectedRowCount() == 1) {
            //设置文件 filter
            filter = new ExtensionFileFilter("xls", false, true);
            filter.setDescription("Save Export File");

            jfc.setDialogTitle("Create the Export Excel file");
            jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        } else if (jTable1.getSelectedRowCount() > 1) {
            //设置目录 filter
            filter = new ExtensionFileFilter("", false, true);
            filter.setDescription("Save Export Files");
            jfc.setDialogTitle("Choose the Export Directory");
            jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        } else {
            //通知未选中，退出处理
            jLabel_info.setText("<html><font color='red'>No Record Selected</font></html>");
            return;
        }

        //取得文件路径
        FileSystemView fsv = FileSystemView.getFileSystemView();
        //得到桌面路径
        jfc.setCurrentDirectory(fsv.getHomeDirectory());

        jfc.setMultiSelectionEnabled(false);
        jfc.setDialogType(JFileChooser.SAVE_DIALOG);

        jfc.setFileFilter(filter);
        int result = jfc.showSaveDialog(this);  // 打开"打开文件"对话框

        if (result == JFileChooser.APPROVE_OPTION) {
            if (jTable1.getSelectedRowCount() == 1) {
                //文件
                String filesrc = jfc.getSelectedFile().getAbsolutePath();
                if (!filesrc.toLowerCase().endsWith(".xls")) {
                    filesrc = jfc.getSelectedFile().getAbsolutePath() + ".xls";
                }
                outputfile = new File(filesrc);
                jLabel_info.setText("Exported File:" + outputfile.getAbsolutePath());
            } else if (jTable1.getSelectedRowCount() > 1) {
                //目录
                outputfile = jfc.getSelectedFile().isDirectory() ? jfc.getSelectedFile() : jfc.getSelectedFile().getParentFile();
                if (outputfile == null) {
                    outputfile = fsv.getHomeDirectory();
                }
                jLabel_info.setText("Exported to path:" + outputfile.getAbsolutePath());
            } else {
                //其它，退出处理
                return;
            }

        } else {
            return;
        }

        if (inputfile == null) {
            return;
        }

        int[] rows = jTable1.getSelectedRows();
        if (rows.length == 1) {
            //单个
            book = null;
            ExportOneRecord(rows[0]);
        } else {
            File path = outputfile;

            for (int rowindex = 0; rowindex < rows.length; rowindex++) {
                int k = rows[rowindex];
                book = null;
                outputfile = new File(path.getAbsolutePath() + "/" + jTable1.getValueAt(k, 0) + ".xls");
                ExportOneRecord(k);
            }
        }
        //        int k = jTable1.getSelectedRow();
        //        ExportOneRecord(k);

    }//GEN-LAST:event_jButton_exportActionPerformed

    public void init() {

    }

    public void ExportOneRecord(int k) {
        Integer testID = (Integer) jTable1.getValueAt(k, 0);
        if (testID == null) {
            jLabel_info.setText("<html><font color='red'>No Record Selected</font></html>");
            return;
        }
//        System.out.println(k);
        //项目vector
        Enumeration<TableColumn> en = jTable1.getTableHeader().getColumnModel().getColumns();
        Vector<String> TestInfoName = new Vector<String>();
        Vector<String> TestInfoValue = new Vector<String>();
        while (en.hasMoreElements()) {
            TableColumn tc = en.nextElement();
            TestInfoName.add((String) tc.getHeaderValue());
        }
        for (int i = 0; i < TestInfoName.size(); i++) {
            TestInfoValue.add("" + jTable1.getValueAt(k, i));
        }
        outputexcelInfo(TestInfoName, TestInfoValue);
        try {
//            initDB();
            for (int cellno = 0; cellno < 6; cellno++) {
                generateCellData(testID, cellno);
            }
        } catch (SQLException ee) {
            System.out.println(ee);
        } finally {
            try {
                sql.close();
            } catch (Exception e) {
            }
            try {
                rs.close();
            } catch (Exception e) {
            }
        }
        try {
            book.write();
            book.close();
            book = null;
        } catch (Exception ee) {
            ee.printStackTrace();
        }
    }

    private void outputexcelInfo(Vector<String> TestInfoName, Vector<String> TestInfoValue) {
        if (outputfile == null) {
            return;
        }
        if (book == null) {
            try {
                //建立文件
                book = Workbook.createWorkbook(outputfile);
            } catch (IOException ex) {
//                Logger.getLogger(ReadAccess330.class.getName()).log(Level.SEVERE, null, ex);
                log.error("建立excel失败",ex);
            }
        } else {
            //不创建文件
        }

        try {

            WritableSheet sheet1 = book.createSheet("TestIno", 0);//建立工作表 0表示第一个工作表
            Label l = new Label(0, 0, "testID");//i列0行
            Enumeration<TableColumn> en = jTable1.getTableHeader().getColumnModel().getColumns();

            int col = 0;
            Label linsert = null;
            for (int i = 0; i < TestInfoName.size(); i++) {
                linsert = new Label(col, i, TestInfoName.get(i));//i列irow行
                sheet1.addCell(linsert);
                col++;
                linsert = new Label(col, i, TestInfoValue.get(i));//i列irow行
                sheet1.addCell(linsert);
                col = 0;
            }
//            while (en.hasMoreElements()) {
//                
//                
//                TableColumn tc = en.nextElement();
//
//                 linsert = new Label(col, row, (String) tc.getHeaderValue());//i列irow行
//                sheet1.addCell(linsert);
//                col++;
//                linsert = new Label(col, row, ""+ jTable1.getValueAt(selectedrow, row++));//i列irow行
//                sheet1.addCell(linsert);
//                col = 0;
//            }

        } catch (WriteException ex) {
            log.error("写excel 错误！", ex);
        }

    }

    private void outputexcelCell(Vector columns, Vector data, int cellno) {
        if (outputfile == null) {
            return;
        }
        if (book == null) {
            try {
                //建立文件
                book = Workbook.createWorkbook(outputfile);
            } catch (IOException ex) {
                log.error("建立excel出错", ex);
            }
        } else {
            //不创建文件
        }

        try {

            WritableSheet sheet1 = book.createSheet("Cell" + cellno, cellno + 1);//建立工作表 0表示第一个工作表
            int count = columns.size();
            for (int i = 0; i < count; i++) {
                Label l = new Label(i, 0, (String) columns.get(i));//i列0行
                sheet1.addCell(l);
            }
            int irow = 1;
//            System.out.println("rows:" + data.size());
            for (Iterator it = data.iterator(); it.hasNext();) {
                Vector row = (Vector) it.next();
                for (int i = 0; i < count; i++) {
                    Label l = new Label(i, irow, (String) row.get(i));//i列irow行
                    sheet1.addCell(l);
                }
                irow++;
            }
//            book.write();
//            book.close();
        } catch (WriteException ex) {
            log.error("写文件错误", ex);
        }

    }

    //
    public void initDB() throws SQLException, ClassNotFoundException {
        String url = "jdbc:odbc:driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=" + inputfile.getAbsolutePath();
        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
        conn = DriverManager.getConnection(url, "admin", "qqqaaa");
    }

    //得到腔数据
    private void generateCellData(Integer testID, int cellno) throws SQLException {
        Vector columns = null;
        Vector data = null;

        data = new Vector();
        columns = new Vector();

//                PreparedStatement st = con.prepareStatement("SELECT * FROM RESULTS WHERE TESTID = ? AND CELLID = ? ORDER BY RESULTID");
//        PreparedStatement st = conn.prepareStatement("SELECT TIMESPAN,TESTTEMPERATURE,ABOVEHUMIDITY,BELOWHUMIDITY,ABOVEPRESSURE,BELOWPRESSURE,FLOWRATE,OPPM,WPPM,OTR,WVTR,SENSORTEMP,AMBTEMP,TESTTYPE,AMTEMPERATURE,AMHUMIDITY,PRODUCETIME,COFFICIENT  FROM RESULTS WHERE TESTID = ? AND CELLID = ? ORDER BY RESULTID");
        PreparedStatement st = conn.prepareStatement("SELECT TESTTEMPERATURE,HUMIDITY,WEIGHT,AMBTEMP,PRODUCETIME,AREA,THICKNESS  FROM RESULTS WHERE TESTID = ? AND CELLID = ? ORDER BY RESULTID");
        st.setInt(1, testID);
        st.setObject(2, cellno);

        rs = st.executeQuery();

        ResultSetMetaData md = rs.getMetaData();
        int columnCount = md.getColumnCount();
        //store column names 
        for (int i = 1; i <= columnCount; i++) {
            columns.add(md.getColumnName(i));
//                System.out.println(md.getColumnName(i));
        }
        columns.ensureCapacity(columnCount);

        Vector row;
        while (rs.next()) {

            row = new Vector(columnCount);
            for (int i = 1; i <= columnCount; i++) {
                row.add(rs.getString(i));
//                    System.out.print(rs.getString(i));
//                    System.out.print(",");
            }
//                System.out.print("\r\n");
            data.add(row);

            //Debugging    
        }

        outputexcelCell(columns, data, cellno);
    }
    
    Connection conn = null;
    Statement sql = null;
    ResultSet rs = null;

    int maxid = Integer.MIN_VALUE;
    int minid = Integer.MAX_VALUE;

    Vector Infodata;
    Vector Infocolumns;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Openfile;
    private javax.swing.JButton jButton_export;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_dbpath;
    private javax.swing.JLabel jLabel_info;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
