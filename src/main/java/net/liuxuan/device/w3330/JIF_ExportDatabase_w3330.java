/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.liuxuan.device.w3330;

import java.awt.Color;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import net.liuxuan.UI.component.ExtensionFileFilter;
import net.liuxuan.device.w3330.exporter.DbTblResult;
import net.liuxuan.device.w3330.exporter.DbTblTest;
import net.liuxuan.utils.FilePlus;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Moses
 */
public class JIF_ExportDatabase_w3330 extends net.liuxuan.UI.JIFUI {

    private static final org.slf4j.Logger log = LoggerFactory.getLogger(JIF_ExportDatabase_w3330.class);
    File inputfile = null;
    File outputfile = null;
    WritableWorkbook book = null;//建立文件

    private static JIF_ExportDatabase_w3330 myInstance; //thisJFrame singleton

    public static JIF_ExportDatabase_w3330 getInstance(net.liuxuan.UI.DataHolder.DataHolder _datas) {
        if (myInstance == null) {
            myInstance = new JIF_ExportDatabase_w3330();
        }
        myInstance.datas = _datas;
        return myInstance;
    }

    /**
     * Creates new form JIF_ExportDatabase
     */
    private JIF_ExportDatabase_w3330() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton_Openfile = new javax.swing.JButton();
        jButton_export_html = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel_dbpath = new javax.swing.JLabel();
        jLabel_info = new javax.swing.JLabel();
        jLabel_info_excel = new javax.swing.JLabel();
        jButton_export_excel = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("W3/330Data Exporter By Liuxuan v1.08");

        jButton_Openfile.setText("Open .MDB File");
        jButton_Openfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_OpenfileActionPerformed(evt);
            }
        });

        jButton_export_html.setText("Export Html");
        jButton_export_html.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_export_htmlActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 153));
        jLabel1.setText("W3/330 Data Exporter");
        jLabel1.setToolTipText("");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "TestID", "TestType", "DeviceID", "CellID", "Operator", "StartTime", "EndTime", "Comments", "SetTemp."
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jLabel_dbpath.setText("no file selected");

        jLabel_info.setText("   ");

        jLabel_info_excel.setText("   ");

        jButton_export_excel.setText("Export Excel");
        jButton_export_excel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_export_excelActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1023, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jButton_Openfile)
                                    .add(jButton_export_excel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 117, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jButton_export_html, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 117, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(14, 14, 14)
                                        .add(jLabel_info_excel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 297, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(layout.createSequentialGroup()
                                        .add(18, 18, 18)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(jLabel_dbpath, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 424, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(jLabel_info, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 424, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton_Openfile)
                    .add(jLabel_dbpath))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton_export_html)
                    .add(jLabel_info))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton_export_excel)
                    .add(jLabel_info_excel)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_OpenfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_OpenfileActionPerformed

        //设置filter
        ExtensionFileFilter filter = new ExtensionFileFilter("mdb", false, true);
        filter.setDescription("Open DataBase File");
        //取得文件路径

        JFileChooser jfc = new JFileChooser();

        //读取lastpath
        String latestPath = (String) datas.get("lastpath");

        File currentDir = FilePlus.getCurrentDir(latestPath);
        jfc.setCurrentDirectory(currentDir);

        jfc.setDialogTitle("Choose the mdb file");
        jfc.setMultiSelectionEnabled(false);
        jfc.setDialogType(JFileChooser.OPEN_DIALOG);
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jfc.setFileFilter(filter);
        int result = jfc.showOpenDialog(this);  // 打开"打开文件"对话框
        if (result == JFileChooser.APPROVE_OPTION) {
            String filesrc = jfc.getSelectedFile().getAbsolutePath();
            inputfile = jfc.getSelectedFile();
            //记录lastpath
            datas.put("lastpath", inputfile.isDirectory() ? inputfile.getAbsolutePath() : inputfile.getParent());
            jLabel_dbpath.setText("DB File Path:" + filesrc);
            maxid = Integer.MIN_VALUE;
            minid = Integer.MAX_VALUE;
        } else {
            return;
        }
        //显示路径

        Infodata = new Vector();
        InfoDataObj = new Vector();
        Infocolumns = new Vector();

        try {

            //            String url = "jdbc:odbc:driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=D://b.MDB";
            if (inputfile == null) {
                return;
            }
            try {
                initDB();

            } catch (SQLException ee) {
                System.out.println(ee);
                log.error("SQLException", ee);
                try {
                    initDB2003();
                } catch (ClassNotFoundException ex) {
                    log.error("未找到数据库Class", ex);
                }
            } catch (ClassNotFoundException ex) {

                log.error("未找到数据库Class", ex);
            }

            sql = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
//            rs = sql.executeQuery("SELECT * FROM test order by testid desc");
            rs = sql.executeQuery("SELECT distinct TEST.TESTID, TEST.TESTTYPE, TEST.STARTTIME, TEST.ENDTIME, TEST.OPERATOR, TEST.CYCLES, TEST.JUDGETMODE, TEST.DEVICEID, TEST.CELLID, TEST.AREA, TEST.THICKNESS, TEST.SPECITYPE, TEST.THICKUNIT, TEST.TESTSTATUS, TEST.REZERO, TEST.INDIVIDUALZERO, TEST.SETTEMP, TEST.COMMENTS, TEST.SAMPLETYPE, TEST.SAMPLESOURCE FROM test,results WHERE test.testid = results.testid  ORDER BY test.testid DESC");
            Infocolumns.add("No");//No
            Infocolumns.add("试验ID");//TestID
            Infocolumns.add("试验类型");//TestType
            Infocolumns.add("设备编号");//DeviceID
            Infocolumns.add("腔编号");//CellID
            Infocolumns.add("开始时间");//StartTime
            Infocolumns.add("结束时间");//EndTime
            Infocolumns.add("设定温度");//SetTemp
            Infocolumns.add("试样类型");//SAMPLETYPE
            Infocolumns.add("面积");//AREA
            Infocolumns.add("厚度");//THICKNESS
            Infocolumns.add("测试编号");//Operator
            Infocolumns.add("试样材料");//SPECITYPE
            Infocolumns.add("试样来源");//SAMPLESOURCE
//            Infocolumns.add("备注");//Comments
            int columnCount = Infocolumns.size();
            Vector row;

            while (rs.next()) {
                row = new Vector(columnCount);
                int tempint = 0;
                String tempstr = "";
                Date tempdate = null;
                double tempdouble = 0;
                DbTblTest testobj = new DbTblTest();

                row.add(InfoDataObj.size());//序号

                tempint = rs.getInt("TESTID");
                maxid = maxid < tempint ? tempint : maxid;
                minid = minid > tempint ? tempint : minid;
                row.add(tempint);
                testobj.setTESTID(tempint);

                tempint = rs.getInt("TESTTYPE");
                if (tempint == 1) {
                    tempstr = "OTR";

                } else if (tempint == 2) {
                    tempstr = "WVTR";
                } else {
                    tempstr = "" + tempint;
                }
                row.add(tempstr);
                testobj.setTESTTYPE(tempstr);

                tempint = rs.getInt("DEVICEID");
                row.add(tempint);
                testobj.setDEVICEID(tempint);

                tempstr = rs.getString("CELLID");
                row.add(tempstr);
                testobj.setCELLID(tempstr);

                tempdate = rs.getTimestamp("STARTTIME");
                row.add(tempdate);
                testobj.setSTARTTIME(tempdate);

                tempdate = rs.getTimestamp("ENDTIME");
                row.add(tempdate);
                testobj.setENDTIME(tempdate);

                tempdouble = rs.getDouble("SETTEMP");
                row.add(tempdouble);
                testobj.setSETTEMP(tempdouble);

                tempint = rs.getInt("SAMPLETYPE");
                if (tempint == 1) {
                    tempstr = "薄膜";
                } else if (tempint == 2) {
                    tempstr = "容器";
                } else {
                    tempstr = "" + tempint;
                }
                row.add(tempstr);
                testobj.setSAMPLETYPE(tempstr);

                tempstr = rs.getString("AREA");
                row.add(tempstr);
                testobj.setAREA(tempstr);

                tempint = rs.getInt("THICKNESS");
                row.add(tempint);
                testobj.setTHICKNESS(tempint);

                tempstr = rs.getString("OPERATOR");
                row.add(tempstr);
                testobj.setOPERATOR(tempstr);

                tempstr = rs.getString("SPECITYPE");
                row.add(tempstr);
                testobj.setSPECITYPE(tempstr);

                tempstr = rs.getString("SAMPLESOURCE");
                row.add(tempstr);
                testobj.setSAMPLESOURCE(tempstr);
                //row.add(rs.getString("COMMENTS"));
                //                row.add(rs.getString(11));
                //                row.add(rs.getInt(10));
                Infodata.add(row);
                InfoDataObj.add(testobj);
            }

        } catch (SQLException ex) {
            log.error("SQLException", ex);
        } finally {
            try {
                sql.close();
            } catch (Exception e) {
            }
            try {
                rs.close();
            } catch (Exception e) {
            }
        }
        DefaultTableModel tableModel = new DefaultTableModel(Infodata, Infocolumns);
        jTable1.setModel(tableModel);
        //产生水平滚动条
        // jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        jTable1.setSelectionBackground(Color.orange);
        //表头排序
        TableRowSorter<TableModel> tableRowSorter = new TableRowSorter<TableModel>(tableModel);
        jTable1.setRowSorter(tableRowSorter);
        //            jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //table内容居中
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();// 设置table内容居中
        tcr.setHorizontalAlignment(SwingConstants.CENTER);// 这句和上句作用一样
        jTable1.setDefaultRenderer(Object.class, tcr);

        //表头居中
        ((DefaultTableCellRenderer) jTable1.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
        //            DefaultTableCellRenderer  rh = new DefaultTableCellRenderer();
        //            rh.setHorizontalAlignment(SwingConstants.CENTER);
        //            jTable1.getTableHeader().setDefaultRenderer(rh);

        jTable1.getColumnModel().getColumn(0).setPreferredWidth(20);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(20);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(30);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(30);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(30);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(60);
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(60);
        jTable1.getColumnModel().getColumn(6).setPreferredWidth(30);
        jTable1.getColumnModel().getColumn(7).setPreferredWidth(30);
        jTable1.getColumnModel().getColumn(8).setPreferredWidth(30);
        jTable1.getColumnModel().getColumn(9).setPreferredWidth(30);
        jTable1.getColumnModel().getColumn(10).setPreferredWidth(30);
        jTable1.getColumnModel().getColumn(11).setPreferredWidth(30);
        jTable1.getColumnModel().getColumn(12).setPreferredWidth(30);

        //        validate();
    }//GEN-LAST:event_jButton_OpenfileActionPerformed

    private void jButton_export_htmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_export_htmlActionPerformed
        JFileChooser jfc = new JFileChooser();
        ExtensionFileFilter filter;

        if (jTable1.getSelectedRowCount() > 0) {
            filter = new ExtensionFileFilter("html", false, true);
            filter.setDescription("Save Export File");

            jfc.setDialogTitle("Create the Export Output Html file");
            jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        } else {
            //通知未选中，退出处理
            jLabel_info.setText("<html><font color='red'>No Record Selected</font></html>");
            return;
        }

        //读取lastpath
        String latestPath_exportpath = (String) datas.get("latestPath_exportpath");

        File currentDir = FilePlus.getCurrentDir(latestPath_exportpath);
        jfc.setCurrentDirectory(currentDir);

        jfc.setMultiSelectionEnabled(false);
        jfc.setDialogType(JFileChooser.SAVE_DIALOG);

        jfc.setFileFilter(filter);
        int result = jfc.showSaveDialog(this);  // 打开"打开文件"对话框

        if (result == JFileChooser.APPROVE_OPTION) {
            //文件
            String filesrc = jfc.getSelectedFile().getAbsolutePath();
            if (!filesrc.toLowerCase().endsWith(".html")) {
                filesrc = jfc.getSelectedFile().getAbsolutePath() + ".html";
            }
            outputfile = new File(filesrc);
            jLabel_info.setText("Exported File:" + outputfile.getAbsolutePath());

            //记录lastpath
            datas.put("latestPath_exportpath", outputfile.isDirectory() ? outputfile.getAbsolutePath() : outputfile.getParent());

        } else {
            return;
        }

        //如果没有输入文件，则不处理
        if (inputfile == null) {
            return;
        }

        DoExportHtml();//执行导出操作

    }//GEN-LAST:event_jButton_export_htmlActionPerformed


    private void jButton_export_excelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_export_excelActionPerformed
        JFileChooser jfc = new JFileChooser();
        ExtensionFileFilter filter;
        boolean multiexport = false; //标识是选择导出单个文件还是导出多个文件

        if (jTable1.getSelectedRowCount() == 1) {
            multiexport = false;
            //设置文件 filter
            filter = new ExtensionFileFilter("xls", false, true);
            filter.setDescription("Save Export File");

            jfc.setDialogTitle("Create the Export Excel file");
            jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        } else if (jTable1.getSelectedRowCount() > 1) {
            multiexport = true;
            //设置目录 filter
            filter = new ExtensionFileFilter("", false, true);
            filter.setDescription("Save Export Files");
            jfc.setDialogTitle("Choose the Export Directory");
            jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        } else {
            //通知未选中，退出处理
            jLabel_info.setText("<html><font color='red'>No Record Selected</font></html>");
            return;
        }

        //读取lastpath
        String latestPath_exportpath = (String) datas.get("latestPath_exportpath");

        File currentDir = FilePlus.getCurrentDir(latestPath_exportpath);

        jfc.setCurrentDirectory(currentDir);

        jfc.setMultiSelectionEnabled(false);
        jfc.setDialogType(JFileChooser.SAVE_DIALOG);

        jfc.setFileFilter(filter);
        int result = jfc.showSaveDialog(this);  // 打开"打开文件"对话框

        if (result == JFileChooser.APPROVE_OPTION) {
            if (multiexport == false) {
                //文件
                String filesrc = jfc.getSelectedFile().getAbsolutePath();
                if (!filesrc.toLowerCase().endsWith(".xls")) {
                    filesrc = jfc.getSelectedFile().getAbsolutePath() + ".xls";
                }
                outputfile = new File(filesrc);
                jLabel_info.setText("Exported File:" + outputfile.getAbsolutePath());
            } else if (multiexport == true) {
                //目录
                outputfile = jfc.getSelectedFile().isDirectory() ? jfc.getSelectedFile() : jfc.getSelectedFile().getParentFile();
                if (outputfile == null) {

                    outputfile = currentDir;
                }
                jLabel_info.setText("Exported to path:" + outputfile.getAbsolutePath());
            }

            //记录lastpath
            datas.put("latestPath_exportpath", outputfile.isDirectory() ? outputfile.getAbsolutePath() : outputfile.getParent());

        } else {
            return;
        }

        //如果没有输入文件，则不处理
        if (inputfile == null) {
            return;
        }

        DoExportExcel();//执行导出操作
    }//GEN-LAST:event_jButton_export_excelActionPerformed

    /**
     * 执行导出操作
     */
    private void DoExportHtml() {

        int[] rows = jTable1.getSelectedRows();
        if (rows.length == 1) {
            //单个
            book = null;
            ExportOneRecord(rows[0]);
        } else {

            File path = outputfile;
//            
//            int cellid = (Integer                                )jTable1.getValueAt(000000000000000000rows[0], 1));
//            System.out.println("testid1:"+cellid);
//            System.out.println("testid2:"+((DbTblTest)InfoDataObj.get(rows[0])).getTESTID());
            //因为不会半夜做实验，所以以日期为区分
            //结构为hashmap-->ArrayList
            HashMap<String, ArrayList<DbTblTest>> exportHM = new HashMap<String, ArrayList<DbTblTest>>();
            //遍历Vector InfoDataObj

            for (int i = 0; i < rows.length; i++) {
//                int j = rows[i];
                int no_id = (Integer) jTable1.getValueAt(rows[i], 0);
                DbTblTest testobj = (DbTblTest) InfoDataObj.get(no_id);
                //System.out.println(testobj.getTESTID());
//            }
//
//            for (Iterator it = InfoDataObj.iterator(); it.hasNext();) {
//                DbTblTest obj = (DbTblTest) it.next();
                if (testobj != null) {
                    FillTestObjResultData(testobj);

                    String index = testobj.getIndexName();
                    ArrayList storelist = exportHM.get(index);
                    if (storelist == null) {
                        storelist = new ArrayList<DbTblTest>();
                    }
                    storelist.add(testobj);
                    //
                    Collections.sort(storelist, new Comparator<DbTblTest>() {
                        public int compare(DbTblTest o1, DbTblTest o2) {
                            //return (o2.getValue() - o1.getValue()); 
                            return (o1.getCELLID().compareTo(o2.getCELLID()));
                        }
                    });
                    exportHM.put(index, storelist);
                }
            }

            //排序 以便输出 stroedlist 仅用于储存 排序
            List<Map.Entry<String, ArrayList<DbTblTest>>> sortedList
                    = new ArrayList<Map.Entry<String, ArrayList<DbTblTest>>>(exportHM.entrySet());

            Collections.sort(sortedList, new Comparator<Map.Entry<String, ArrayList<DbTblTest>>>() {
                public int compare(Map.Entry<String, ArrayList<DbTblTest>> o1, Map.Entry<String, ArrayList<DbTblTest>> o2) {
                    //return (o2.getValue() - o1.getValue()); 
                    return (o1.getKey()).toString().compareTo(o2.getKey());
                }
            });
            //显示出来

            StringBuilder sb_out = new StringBuilder();
            sb_out.append("<html>");
            sb_out.append("<head>");
            sb_out.append("<style>\n"
                    + "body{ margin:0px auto; text-align:center; } \n"
                    + "table{ width:90%; border:#00F 1px solid;}\n"
                    + "thead tr{background-color: #D9FFD9;border-top: 1px solid black;border-bottom: 1px solid black;}\n"
                    + "td{ border:1px #CCC solid; border-right:none; border-top:none;white-space:nowrap;text-align:center;}\n"
                    + "th{ border:1px #CCC solid; border-top: 3px double #ccc; border-bottom: 3px double #ccc; border-right:none; border-top:none;}\n"
                    + "</style>");
            sb_out.append("</head>\r\n");
            sb_out.append("<body>\r\n");
            sb_out.append("<BR/><p><h1>结果导出</h1></p>");

            //记录当前模块
            char currentModule = 0;

            for (int i = 0; i < sortedList.size(); i++) {
                ArrayList<DbTblTest> tmplist = sortedList.get(i).getValue();
                char module = sortedList.get(i).getKey().charAt(0);
                if (module != currentModule) {
                    currentModule = module;
                    sb_out.append("<p><h2>=========================模块").append(module).append("=========================<br/></h2></p>");
                }
//                sb_out.append("模块").append(module).append(":<br/>");
                sb_out.append("<table  align=center>");
                sb_out.append("<thead><tr><td>序号</td><td>试验类型</td><td>模块号</td><td>腔</td><td>开始时间</td><td>结束时间</td>");
                sb_out.append("<td>设定温度</td><td>试样类型</td><td>面积</td><td>厚度</td>");
//                sb_out.append("<td>试样名称</td><td>操作者</td><td>试样来源</td>");
                sb_out.append("</tr></thead>\r\n");
                for (DbTblTest testobj : tmplist) {
                    if (testobj != null) {
                        sb_out.append("<tr>");
                        sb_out.append("<th>").append(testobj.getTESTID())
                                .append("</th> <th>").append(testobj.getTESTTYPE_readable())
                                .append("</th> <th>").append(testobj.getDEVICEID())
                                .append("</th> <th>").append(testobj.getCELLID_readable())
                                .append("</th> <th>").append(testobj.getSTARTTIME_readable())
                                .append("</th> <th>").append(testobj.getENDTIME_readable())
                                .append("</th> <th>").append(testobj.getSETTEMP())
                                .append("</th> <th>").append(testobj.getSAMPLETYPE())
                                .append("</th> <th>").append(testobj.getAREA())
                                .append("</th> <th>").append(testobj.getTHICKNESS())
                                //                                .append("</th> <th>").append(testobj.getSPECITYPE())
                                //                                .append("</th> <th>").append(testobj.getOPERATOR())
                                //                                .append("</th> <th>").append(testobj.getSAMPLESOURCE())
                                .append("</th>");

                        //System.out.println(sortedList.get(i).getKey() + "----" + testobj.toString());
                        sb_out.append("</tr>\r\n");
                        //下面要将每个结果加上;935481
                        sb_out.append("<thead><tr><td>No.</td><td>上腔湿度</td><td>流量</td><td>环境温度</td><td>透过率</td><td>透过系数</td><td>PPM</td>");
                        sb_out.append("<td>试验温度</td><td>时间</td><td>下腔湿度</td>");
//                        sb_out.append("<td>传感器温度</td><td>试验类型</td><td>环境湿度</td>");
                        sb_out.append("</tr></thead>\r\n");
                        ArrayList<DbTblResult> results = testobj.getResults();
                        int index = 1;
                        for (Iterator<DbTblResult> it = results.iterator(); it.hasNext();) {
                            DbTblResult rst = it.next();
                            sb_out.append("<tr>");
                            sb_out.append("<td>").append(index++)
                                    .append("</td><td>").append(rst.getABOVEHUMIDITY()).append("%")
                                    .append("</td><td>").append(rst.getFLOWRATE()).append("ml/min")
                                    .append("</td><td>").append(rst.getAMBTEMP()).append("℃")
                                    .append("</td><td>").append(rst.getTR_readable())
                                    .append("</td><td>").append(rst.getCOFFICIENT_readable())
                                    .append("</td><td>").append(rst.getPPM())
                                    .append("</td><td>").append(rst.getTESTTEMPERATURE())
                                    .append("</td><td>").append(rst.getPRODUCETIME_readable())
                                    .append("</td><td>").append(rst.getBELOWHUMIDITY()).append("%")
                                    //                                    .append("</td><td>").append(rst.getSENSORTEMP())
                                    //                                    .append("</td><td>").append(rst.getTESTTYPE())
                                    //                                    .append("</td><td>").append(rst.getAMHUMIDITY())
                                    .append("</td></tr>\r\n");
                        }
                    }
                }
                sb_out.append("</table><br/><br/><br/>\r\n\r\n");
            }
            sb_out.append("</body>");
            sb_out.append("</html>");

            outputfile = new File(path.getAbsolutePath());
            FilePlus.createFile(outputfile);
            FilePlus.writeText(outputfile.getAbsolutePath(), sb_out.toString());

            try {
//                URI uri = new URI("http://www.baidu.com/");
//                URI uri = new URI(outputfile.getAbsolutePath());
//                Desktop.getDesktop().browse(uri);
                Desktop.getDesktop().open(path);
            } catch (IOException ex) {
                log.error("打开HTML", ex);
            }
        }
    }

    /**
     * 执行导出Excel操作
     */
    private void DoExportExcel() {
        System.out.println("当前功能不完善，不建议使用");
        int[] rows = jTable1.getSelectedRows();
        if (rows.length == 1) {
            //单个
            book = null;
            ExportOneRecord(rows[0]);
        } else {

            File path = outputfile;

            for (int rowindex = 0; rowindex < rows.length; rowindex++) {
                int k = rows[rowindex];
                book = null;
                outputfile = new File(path.getAbsolutePath() + "/" + jTable1.getValueAt(k, 1) + ".xls");
                ExportOneRecord(k);
            }

        }
    }

    @Override
    public void init() {

    }

    private void FillTestObjResultData(DbTblTest obj) {
        //SELECT RESULTID, TESTID, CELLID, TIMESPAN, TESTTEMPERATURE, ABOVEHUMIDITY, BELOWHUMIDITY, ABOVEPRESSURE, BELOWPRESSURE, FLOWRATE, OPPM, WPPM, OTR, WVTR, SENSORTEMP, AMBTEMP, TESTTYPE, AMTEMPERATURE, AMHUMIDITY, PRODUCETIME, COFFICIENT FROM RESULTS;
//        ResultSet rs = null;
        try {
            PreparedStatement st = conn.prepareStatement("SELECT RESULTID, TESTID, CELLID, TIMESPAN, TESTTEMPERATURE, ABOVEHUMIDITY, BELOWHUMIDITY, ABOVEPRESSURE, BELOWPRESSURE, FLOWRATE, OPPM, WPPM, OTR, WVTR, SENSORTEMP, AMBTEMP, TESTTYPE, AMTEMPERATURE, AMHUMIDITY, PRODUCETIME, COFFICIENT FROM RESULTS WHERE TESTID = ? AND CELLID = ? ORDER BY RESULTID");
            st.setInt(1, obj.getTESTID());
            Integer tempint = Integer.parseInt(obj.getCELLID());
            tempint = tempint - 1;
            st.setObject(2, "" + tempint);
//            System.out.println("log: TestId:" + obj.getTESTID() + " , CellID: " + tempint);

            rs = st.executeQuery();
            ArrayList<DbTblResult> rstlist = new ArrayList<DbTblResult>();
            while (rs.next()) {
                DbTblResult result = new DbTblResult();
                result.setRESULTID(rs.getInt("RESULTID"));
                result.setTESTID(rs.getInt("TESTID"));
                result.setCELLID(rs.getInt("CELLID"));
                result.setTIMESPAN(rs.getDouble("TIMESPAN"));
                result.setTESTTEMPERATURE(rs.getDouble("TESTTEMPERATURE"));
                result.setABOVEHUMIDITY(rs.getDouble("ABOVEHUMIDITY"));
                result.setBELOWHUMIDITY(rs.getDouble("BELOWHUMIDITY"));
                result.setABOVEPRESSURE(rs.getDouble("ABOVEPRESSURE"));
                result.setBELOWPRESSURE(rs.getDouble("BELOWPRESSURE"));
                result.setFLOWRATE(rs.getDouble("FLOWRATE"));
                result.setOPPM(rs.getDouble("OPPM"));
                result.setWPPM(rs.getDouble("WPPM"));
                result.setOTR(rs.getDouble("OTR"));
                result.setWVTR(rs.getDouble("WVTR"));
                result.setSENSORTEMP(rs.getDouble("SENSORTEMP"));
                result.setAMBTEMP(rs.getDouble("AMBTEMP"));
                result.setTESTTYPE(rs.getDouble("TESTTYPE"));
                result.setAMTEMPERATURE(rs.getDouble("AMTEMPERATURE"));
                result.setAMHUMIDITY(rs.getDouble("AMHUMIDITY"));
                result.setPRODUCETIME(rs.getTimestamp("PRODUCETIME"));
                result.setCOFFICIENT(rs.getDouble("COFFICIENT"));
                rstlist.add(result);
            }
            obj.setResults(rstlist);

        } catch (SQLException ex) {
            System.out.println(ex);
            Logger.getLogger(JIF_ExportDatabase_w3330.class.getName()).log(Level.SEVERE, null, ex);
        } finally {

            try {
                rs.close();
            } catch (Exception e) {
            }
        }

    }

    /**
     * 导出一条记录
     *
     * @param k SelectedRows
     */
    public void ExportOneRecord(int k) {
        Integer testID = (Integer) jTable1.getValueAt(k, 1);

        if (testID == null) {
            jLabel_info.setText("<html><font color='red'>No Record Selected</font></html>");
            return;
        }
        int cellid = Integer.parseInt((String) jTable1.getValueAt(k, 4));
//        System.out.println(k);
        //项目vector
        Enumeration<TableColumn> en = jTable1.getTableHeader().getColumnModel().getColumns();
        Vector<String> TestInfoName = new Vector<String>();
        Vector<String> TestInfoValue = new Vector<String>();
        while (en.hasMoreElements()) {
            TableColumn tc = en.nextElement();
            TestInfoName.add((String) tc.getHeaderValue());
        }
        for (int i = 0; i < TestInfoName.size(); i++) {
            TestInfoValue.add("" + jTable1.getValueAt(k, i));
        }
        outputexcelInfo(TestInfoName, TestInfoValue);
        try {
//            initDB();
            //liuxuan 201407/07 修改一次导出6个腔的原始060模式，改为按选中导出

//            for (int cellno = 0; cellno < 6; cellno++) {
//                generateCellData(testID, cellno);
//            }
            generateCellData(testID, cellid);
        } catch (SQLException ee) {
            System.out.println(ee);
        } finally {
            try {
                sql.close();
            } catch (Exception e) {
            }
            try {
                rs.close();
            } catch (Exception e) {
            }
        }
        try {
            book.write();
            book.close();
            book = null;
        } catch (Exception ee) {
            ee.printStackTrace();
        }
    }

    private void outputexcelInfo(Vector<String> TestInfoName, Vector<String> TestInfoValue) {
        if (outputfile == null) {
            return;
        }
        if (book == null) {
            try {
                //建立文件
                book = Workbook.createWorkbook(outputfile);
            } catch (IOException ex) {
//                Logger.getLogger(ReadAccess330.class.getName()).log(Level.SEVERE, null, ex);
                log.error("建立excel失败", ex);
            }
        } else {
            //不创建文件
        }

        try {

            WritableSheet sheet1 = book.createSheet("TestIno", 0);//建立工作表 0表示第一个工作表
            Label l = new Label(0, 0, "testID");//i列0行
            Enumeration<TableColumn> en = jTable1.getTableHeader().getColumnModel().getColumns();

            int col = 0;
            Label linsert = null;
            for (int i = 1; i < TestInfoName.size(); i++) {
                linsert = new Label(col, i, TestInfoName.get(i));//i列irow行
                sheet1.addCell(linsert);
                col++;
                linsert = new Label(col, i, TestInfoValue.get(i));//i列irow行
                sheet1.addCell(linsert);
                col = 0;
            }
//            while (en.hasMoreElements()) {
//                
//                
//                TableColumn tc = en.nextElement();
//
//                 linsert = new Label(col, row, (String) tc.getHeaderValue());//i列irow行
//                sheet1.addCell(linsert);
//                col++;
//                linsert = new Label(col, row, ""+ jTable1.getValueAt(selectedrow, row++));//i列irow行
//                sheet1.addCell(linsert);
//                col = 0;
//            }

        } catch (WriteException ex) {
            log.error("写excel 错误！", ex);
        }

    }

    private void outputexcelCell(Vector columns, Vector data, int cellno) {
        if (outputfile == null) {
            return;
        }
        if (book == null) {
            try {
                //建立文件
                book = Workbook.createWorkbook(outputfile);
            } catch (IOException ex) {
                log.error("建立excel出错", ex);
            }
        } else {
            //不创建文件
        }

        try {

            WritableSheet sheet1 = book.createSheet("Cell" + cellno, book.getNumberOfSheets() + 1);//建立工作表 0表示第一个工作表
            int count = columns.size();
            for (int i = 0; i < count; i++) {
                Label l = new Label(i, 0, (String) columns.get(i));//i列0行
                sheet1.addCell(l);
            }
            int irow = 1;
//            System.out.println("rows:" + data.size());
            for (Iterator it = data.iterator(); it.hasNext();) {
                Vector row = (Vector) it.next();
                for (int i = 0; i < count; i++) {
                    Label l = new Label(i, irow, (String) row.get(i));//i列irow行
                    sheet1.addCell(l);
                }
                irow++;
            }
//            book.write();
//            book.close();
        } catch (WriteException ex) {
            log.error("写文件错误", ex);
        }

    }

    //
    public void initDB() throws SQLException, ClassNotFoundException {
        String url = "jdbc:odbc:driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=" + inputfile.getAbsolutePath();
        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
        conn = DriverManager.getConnection(url, "admin", "qqqaaa");
    }
    
    public void initDB2003() throws SQLException, ClassNotFoundException {
        String url = "jdbc:odbc:driver={Microsoft Access Driver (*.mdb)};DBQ=" + inputfile.getAbsolutePath();
        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
        conn = DriverManager.getConnection(url, "admin", "qqqaaa");
    }

    //得到腔数据
    private void generateCellData(Integer testID, int cellno) throws SQLException {
        Vector columns = null;
        Vector data = null;

        data = new Vector();
        columns = new Vector();
        conn.setReadOnly(true);

//                PreparedStatement st = con.prepareStatement("SELECT * FROM RESULTS WHERE TESTID = ? AND CELLID = ? ORDER BY RESULTID");
        PreparedStatement st = conn.prepareStatement("SELECT TIMESPAN,TESTTEMPERATURE,ABOVEHUMIDITY,BELOWHUMIDITY,ABOVEPRESSURE,BELOWPRESSURE,FLOWRATE,OPPM,WPPM,OTR,WVTR,SENSORTEMP,AMBTEMP,TESTTYPE,AMTEMPERATURE,AMHUMIDITY,PRODUCETIME,COFFICIENT  FROM RESULTS WHERE TESTID = ? AND CELLID = ? ORDER BY RESULTID");
        st.setInt(1, testID);
        st.setObject(2, cellno - 1);

        rs = st.executeQuery();

        ResultSetMetaData md = rs.getMetaData();
        int columnCount = md.getColumnCount();
        //store column names 
        for (int i = 1; i <= columnCount; i++) {
            columns.add(md.getColumnName(i));
//                System.out.println(md.getColumnName(i));
        }
        columns.ensureCapacity(columnCount);

        Vector row;
        while (rs.next()) {

            row = new Vector(columnCount);
            for (int i = 1; i <= columnCount; i++) {
                row.add(rs.getString(i));
//                    System.out.print(rs.getString(i));
//                    System.out.print(",");
            }
//                System.out.print("\r\n");
            data.add(row);

            //Debugging    
        }
//        rs.close();

        outputexcelCell(columns, data, cellno);
    }

    Connection conn = null;
    Statement sql = null;
    ResultSet rs = null;

    int maxid = Integer.MIN_VALUE;
    int minid = Integer.MAX_VALUE;

    Vector Infodata;
    Vector InfoDataObj;
    Vector Infocolumns;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Openfile;
    private javax.swing.JButton jButton_export_excel;
    private javax.swing.JButton jButton_export_html;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_dbpath;
    private javax.swing.JLabel jLabel_info;
    private javax.swing.JLabel jLabel_info_excel;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
